FEATURE LIST
============
Cassandra Support
1.  Write Key.saved, => Done
2.  Separate Indexed and UnIndexed Heirachies => Done
3.  Write Property.convert for each property with unittests. => Done
4.  Write Property.deconvert() [Write SERDE routine for properties.] => Done
5.  Rewrite Simpson.put() and fill up a key when a Model is saved => Done
6.  Write Simpson.read(), add support for Key.columns, and individual column access => Done
7.  Write Reference => Done
8.  Write Simpson.delete() => Done
9.  Write CQLQuery and Model.query() 
10. Wire Model => WIP[Model already seems to part wired]
11. Create a Rating, BlowFishHash and Md5Hash Property => Suspended

Redis Support(Use the Property convert/deconvert mechanism),
1.  Write Cache.create("Store metadata")
2.  Cache.put("Batch put") 
3.  Cache.read("Batch Read"), add support for Key.columns, and individual column access.
4.  Cache.delete("Delete Entire class or separate instances")
5.  Wire the appropriate model methods. __getattr__, read, save, delete, update !?
6.  Write JSON Serialization and Deserialization
7.  Tag v1.0.0.beta
8.  Debug and Test for Concurrent Use (Probably use tornado and AB todo a flood)
9.  Tag v1.0.0.final
10.  Go out to a nice restaurant on campus for a break :).

Design Decisions:
Redis is strictly supposed to be a cache for data stored in Cassandra; Any other
bonuses it provides are welcome.
